##### ISSUE: 
## Can only create a CW Alarm in the same region as the resoure (CF must be in US-EAST-1)
## Can only send CW Alarm notifications to an SNS topic in the same region as the alarm
## ALSO, need to validate dimensions for each metric
## ALSO, I think the metric name needs to be the same as the default metric name:
## All dimensions and metrics for a service namespace can be found here: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html
## SOLUTION: probably need a topic for each region, with a subscription to the same zenduty service



terraform {
  # specifies the required provider for this terraform module
  required_providers {
    aws = {
      source                = "hashicorp/aws"
      version               = ">= 5.21.0"
      configuration_aliases = [aws.east1]
    }
  }
}

# Create the SNS topic with a name_prefix, so that the name is autogenerated and unique
resource "aws_sns_topic" "topic1" {
  name_prefix = "CloudResumeChallenge_"
}

# Create the SNS topic with a name_prefix, so that the name is autogenerated and unique
resource "aws_sns_topic" "topic2" {
  provider    = aws.east1
  name_prefix = "CloudResumeChallenge_"
}

# Create the access policy for the SNS topic - it uses the basic access policy that is configured for topics by default
resource "aws_sns_topic_policy" "default1" {
  arn    = aws_sns_topic.topic1.arn
  policy = data.aws_iam_policy_document.sns_topic_policy1.json
}

# Create the access policy for the SNS topic - it uses the basic access policy that is configured for topics by default
resource "aws_sns_topic_policy" "default2" {
  provider = aws.east1
  arn      = aws_sns_topic.topic2.arn
  policy   = data.aws_iam_policy_document.sns_topic_policy2.json
}

# SNS Subscription
resource "aws_sns_topic_subscription" "sub1" {
  topic_arn = aws_sns_topic.topic1.arn
  protocol  = "https"
  endpoint  = var.ZendutyServiceWebhook
}

# SNS Subscription
resource "aws_sns_topic_subscription" "sub2" {
  provider  = aws.east1
  topic_arn = aws_sns_topic.topic2.arn
  protocol  = "https"
  endpoint  = var.ZendutyServiceWebhook
}

# Many CloudWatch Alarms
resource "aws_cloudwatch_metric_alarm" "APIGWRPS" {
  alarm_name                = "CRC_APIGW_RPS_GTE200"
  comparison_operator       = "GreaterThanOrEqualToThreshold"
  evaluation_periods        = "1"
  metric_name               = "Count"
  namespace                 = "AWS/ApiGateway"
  period                    = 600
  statistic                 = "SampleCount"
  threshold                 = 200
  alarm_actions             = [aws_sns_topic.topic1.arn]
  alarm_description         = "Alarm for monitoring if the API gets more than 200 requests per second over 10 minutes."
  ok_actions                = [aws_sns_topic.topic1.arn]
  insufficient_data_actions = [aws_sns_topic.topic1.arn]
  dimensions = {
    ApiName = var.APIGWName
  }
}

resource "aws_cloudwatch_metric_alarm" "CFErrorRate" {
  provider                  = aws.east1
  alarm_name                = "CRC_CF_ErrorRate_GTE2in10min"
  comparison_operator       = "GreaterThanOrEqualToThreshold"
  evaluation_periods        = "1"
  metric_name               = "TotalErrorRate"
  namespace                 = "AWS/CloudFront"
  period                    = 600
  statistic                 = "Average"
  threshold                 = 80
  alarm_actions             = [aws_sns_topic.topic2.arn]
  alarm_description         = "Alarm for monitoring if the CF Distro returns more than 2 errors (4XX/5XX) in 10 minutes."
  ok_actions                = [aws_sns_topic.topic2.arn]
  insufficient_data_actions = [aws_sns_topic.topic2.arn]
  dimensions = {
    DistributionId = var.CloudFrontID
    Region         = "Global"
  }
}

resource "aws_cloudwatch_metric_alarm" "LambdaFailures" {
  alarm_name                = "CRC_Lambda_Failures_GTE3in60min"
  comparison_operator       = "GreaterThanOrEqualToThreshold"
  evaluation_periods        = "1"
  metric_name               = "Errors"
  namespace                 = "AWS/Lambda"
  period                    = 3600
  statistic                 = "Sum"
  threshold                 = 3
  alarm_actions             = [aws_sns_topic.topic1.arn]
  alarm_description         = "Alarm for monitoring if the Lambda Fxn has 3 or more invocation failures in 60 minutes."
  ok_actions                = [aws_sns_topic.topic1.arn]
  insufficient_data_actions = [aws_sns_topic.topic1.arn]
  dimensions = {
    FunctionName = var.LambdaName
  }
}