name: "DEV Terraform Build automated workflow"

on: 
  push: 
    branches:
    - Test
    paths:
    - '**.tf'
    - '**.tfvars'
    - 'web-be/lambda/SetVisitorCounter_Lambda.py'
    - 'web-be/lambda.zip'
    - '**.tftpl'
    - '.github/workflows/tf-build-DEV.yml'
    - 'cypresstests/cypress/e2e/**'
  workflow_dispatch:

env: 
  TF_LOG: INFO
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET_DEV }}
  TF_STATE_KEY: ${{ vars.TF_STATE_KEY_DEV }}
  TF_STATE_DDBTABLE: ${{ vars.TF_STATE_DDBTABLE_DEV }}
  TF_STATE_REGION: ${{ vars.TF_STATE_REGION }}
  AWS_REGION : us-east-1 # This only dictates the default region for API and CLI commands, but region is always specified on a per command basis, so it doesn't matter
  AWS_ROLE_DEV: ${{vars.AWS_ROLE_DEV}}
  AWS_HOSTEDZONE_DEV: ${{vars.AWS_HOSTEDZONE_DEV}}
  AWS_SITENAME: ${{ vars.AWS_SITENAME }}

# Permission can be added at job level or workflow level    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
  pull-requests: write
  issues: write

jobs:
  terraform:
    name: "DEV tf infrastructure deployment"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
        # We keep backend terraform files in the tf-be directory.
        working-directory: ./tf-main

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: Print Run info
        run: |
          echo "Github.ref = ${{ github.ref }}"
          echo "Github.ref_name = ${{ github.ref_name }}"
          echo "Github.event_name = ${{ github.event_name }}"
          echo "Github.event = ${{join(github.event.*, '\n')}}"
           
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ env.AWS_ROLE_DEV }} #change to reflect your IAM role‚Äôs ARN
            aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.1
      
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET" -backend-config="key=$TF_STATE_KEY" -backend-config="region=$TF_STATE_REGION" -backend-config="dynamodb_table=$TF_STATE_DDBTABLE"
      
      - name: Terraform format
        id: fmt
        run: terraform fmt
      
      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="terraform.tfvars" -var "HostedZone=$AWS_HOSTEDZONE_DEV" -var "WebSiteHostName=$AWS_SITENAME"
        continue-on-error: true
      
      - name: Create Issue with TF plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars" -var "HostedZone=$AWS_HOSTEDZONE_DEV" -var "WebSiteHostName=$AWS_SITENAME"

      - name: Cypress run
        id: cypress
        if: steps.apply.outcome == 'success'
        uses: cypress-io/github-action@v6
        with:
          working-directory: cypresstests
        env:
          CYPRESS_ghaurl: "https://${{env.AWS_SITENAME}}.${{env.AWS_HOSTEDZONE_DEV}}"

      - name: Testing Succeeded - Creating a PR to merge to main
        if: steps.cypress.outcome == 'success'
        run: gh pr create -B main -H Test --title "Automated PR - test env passed cypress tests" --body "PR created by GHA. The Test environment has been deployed and tested (with Cypress). Once this PR is manually approved, the infrastructure will be deployed to the Prod environment."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Testing Failed - Creating an issue
        if: steps.cypress.outcome != 'success'
        run: gh issue create --title "Branch:Test - Cypress Testing Failed - Run=${{github.run_id}}" --body "Please see workflow run given by ${{github.run_id}} for information about the failure" --label "bug"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
