name: "DEV Terraform Build automated workflow"

on: 
  push: 
    branches:
    - Test
    paths:
    - '**.tf'
    - '**.tfvars'
    - 'web-be/lambda/SetVisitorCounter_Lambda.py'
    - 'web-be/lambda.zip'
    - '.github/workflows/tf-build-DEV.yml'
    - '.github/workflows/tf-build-PROD.yml'
    - '.github/workflows/tf-destroy-DEV-workflow-call.yml'
    - 'cypresstests/cypress/e2e/**'
    - 'web-fe/*.html'
    - 'web-fe/*.js'
  workflow_dispatch:

env: 
  TF_LOG: INFO
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET_DEV }}
  TF_STATE_KEY: ${{ vars.TF_STATE_KEY_DEV }}
  TF_STATE_DDBTABLE: ${{ vars.TF_STATE_DDBTABLE_DEV }}
  TF_STATE_REGION: ${{ vars.TF_STATE_REGION }}
  AWS_REGION : us-east-1 # This only dictates the default region for API and CLI commands, but region is always specified on a per command basis, so it doesn't matter
  AWS_ROLE_DEV: ${{vars.AWS_ROLE_DEV}}
  AWS_HOSTEDZONE_DEV: ${{vars.AWS_HOSTEDZONE_DEV}}
  AWS_SITENAME: ${{ vars.AWS_SITENAME }}
  ZENDUTY_WEBHOOK: ${{ vars.ZENDUTY_CRC_DEV_WEBHOOK }}

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
  pull-requests: write
  issues: write

jobs:
  terraform:
    name: "DEV tf infrastructure deployment"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
        # We keep backend terraform files in the tf-be directory.
        working-directory: ./tf-main

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4

      - name: Print Run info
        run: |
          echo "Github.ref = ${{ github.ref }}"
          echo "Github.ref_name = ${{ github.ref_name }}"
          echo "Github.event_name = ${{ github.event_name }}"
          echo "Github.event = ${{join(github.event.*, '\n')}}"
           
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ env.AWS_ROLE_DEV }} #change to reflect your IAM roleâ€™s ARN
            aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.1
      
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET" -backend-config="key=$TF_STATE_KEY" -backend-config="region=$TF_STATE_REGION" -backend-config="dynamodb_table=$TF_STATE_DDBTABLE"
      
      - name: Terraform format
        id: fmt
        run: terraform fmt
      
      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -var-file="terraform.tfvars" -var "HostedZone=$AWS_HOSTEDZONE_DEV" -var "WebSiteHostName=$AWS_SITENAME" -var "ZendutyServiceWebhook=$ZENDUTY_WEBHOOK"
      
      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars" -var "HostedZone=$AWS_HOSTEDZONE_DEV" -var "WebSiteHostName=$AWS_SITENAME" -var "ZendutyServiceWebhook=$ZENDUTY_WEBHOOK"

      - name: Cypress run
        id: cypress
        if: steps.apply.outcome == 'success'
        uses: cypress-io/github-action@v6
        with:
          working-directory: cypresstests
        env:
          CYPRESS_ghaurl: "https://${{env.AWS_SITENAME}}.${{env.AWS_HOSTEDZONE_DEV}}"

      - name: Testing Succeeded - Creating a PR to merge to main
        if: steps.cypress.outcome == 'success'
        run: |
          output=$(gh pr list --base main --head Test) 
          if [[ -z "${output}" ]]; then 
              echo "The 'gh pr list --base main --head Test' call returned an empty string - meaning there are no PRs. Now creating a new PR."
              gh pr create -B main -H Test --title "Automated PR - test env passed cypress tests_ID${{github.run_id}}" --body "PR created by GHA (ID${{github.run_id}}). The Test environment has been deployed and tested (with Cypress). Once this PR is manually approved, the infrastructure will be deployed to the Prod environment."
          else
              echo "The 'gh pr list --base main --head Test' call returned a non-empty string meaning a PR already exists. Will delete this PR and create a new one so the PR reflects the GHA run that created it."
              echo "This is the output of the pr list command: $output"
          
              prID=$(echo $output | awk '{print $1;}')
              echo "This is the extracted PR ID: $prID"
          
              # validate if the PR ID contains only digits
              if [[ $prID =~ ^[0-9]+$ ]]; then
                  echo "Validated that the PRID contains only digits. Will now delete the PR and create a new one."
                  gh pr close $prID --comment "Deleting and recreating this PR"
                  echo "PR should have been closed but I am not sure how to capture the command's output to confirm. Will just assume its closed since we have other checks in place. Now creating the new PR." 
                  gh pr create -B main -H Test --title "Automated PR - test env passed cypress tests_ID${{github.run_id}}" --body "PR created by GHA (ID${{github.run_id}}). The Test environment has been deployed and tested (with Cypress). Once this PR is manually approved, the infrastructure will be deployed to the Prod environment."
              else
                  echo "The PRID contained some non-digits. Will just leave things alone, but create an issue for this problem so it can be inspected."
                  gh issue create --title "Failed to delete old Test->Main PR - Run=${{github.run_id}}" --body "Please see workflow run given by ${{github.run_id}} for information about the failure. For some reason the extracted PR ID was non-numeric" --label "bug"
              fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Testing Failed - Creating an issue
        if: steps.cypress.outcome != 'success'
        run: gh issue create --title "Branch:Test - Cypress Testing Failed - Run=${{github.run_id}}" --body "Please see workflow run given by ${{github.run_id}} for information about the failure" --label "bug"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
